<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	<!-- Spring Framework에서 제공하는 Filter 클래스를 등록하여 사용하도록 설정 -->
	<!-- CharacterEncodingFilter : 요청을 받기 전에 Request 인스턴스에 대한 인코딩을 변경하는 필터 클래스 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>		
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- <servlet>
		<servlet-name>action</servlet-name>
		<servlet-class>com.itwill09.mvc.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>action</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping> -->
	
	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- ContextLoaderListener 클래스가 읽어 들이는 Bean Configuration File의 경로를 제공하는 엘리먼트
		 리스너 클래스가 읽어 들이는 정보를 제공 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters 
		 listener : WAS 실행 시 인스턴스로 생성되는 리스너 클래스를 설정하는 엘리먼트
		 리스너 인스턴스 : 모든 서블릿 또는 필터가 공유하여 사용하는 인스턴스 
		 리스너 클래스 : ServletContextListener 인터페이스를 상속받아 작성된 클래스
		 WAS 실행 시 초기화 작업을 실행하는 메소드 자동 호출 -->
	<listener>
		<!-- ContextLoaderListener : SpringFramework에서 제공하는 리스너 클래스
			 ApplicationContext를 이용하여 Bean Configuration File을 읽어 Spring Bean을 생성하여 제공하는 기능이 구현된 클래스
			 모든 Front Controller에서 사용할 수 있는 Spring Bean이 생성
		 -->
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<!-- 클래스를 서블릿으로 등록 -->
	<!-- SpringFramework 에서 제공하는 Front Controller 클래스(DispatcherServlet)를 서블릿으로 등록 -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- init-param : Front Controller 클래스에 필요한 정보를 제공 
			 Bean Configuration File 경로를 제공
			 Front Controller 클래스가 인스턴스로 생성될 때  
			 Bean Configuration File을 WebApplicationContext가 읽어 Spring Bean 생성
			 WebApplicationContext는 ApplicationContext를 상속받은 자식이다.
			 -->
	
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<!-- WAS가 동작될 경우 서블릿 클래스를 인스턴스로 생성 -->
		<load-on-startup>0</load-on-startup>
	</servlet>
	
	<!-- 등록된 서블릿에 대한 요청 URL 주소 설정 -->
	<!-- Front Controller를 클라이언트의 요청에 대한 단일 진입점으로 설정 -->
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<!-- 클라이언트의 모든 요청을 받아 처리하도록 설정 -->
		<url-pattern>/</url-pattern>
		<!-- 클라이언트의 요청 URL 주소가 .do로 요청된 경우 처리하도록 설정 -->
		<!-- <url-pattern>*.do</url-pattern> -->
		<!-- <url-pattern>*.itwill</url-pattern> -->
	</servlet-mapping>

</web-app>

<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- annotation-driven : Command Controller를 Spring Bean 으로 생성하여 Front Controller에서 사용하기 위한 
	@controller 어노테이션을 이용하기 위한 엘리먼트 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- resources : Front Controller를 이용하지 않고 요청을 받아 응답할 수 있는 디렉토리와 URL 주소를 설정
		 location 속성 : resources 파일이 존재하는 디렉토리를 속성값으로 설정
		 mapping 속성 : resources 파일에 접근 가능한 URL 주소를 매핑  -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->
	<resources mapping="/css/**" location="/WEB-INF/resources/css/" />
	<resources mapping="/img/**" location="/WEB-INF/resources/img/" />
	<resources mapping="/js/**" location="/WEB-INF/resources/js/" />
	<resources mapping="/plugins/**" location="/WEB-INF/resources/plugins/" />
	<resources mapping="/files/**" location="/resources/files/" />
	<resources mapping="/admin/dist/**" location="/WEB-INF/resources/admin/dist/" />
	<resources mapping="/admin/vendor/**" location="/WEB-INF/resources/admin/vendor/" />

	<!-- 파일 업로드를 위한 Spring Bean 등록 -->
	<!-- => beanName은 반드시 multipartResolver로 등록해야만 된다. -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- maxUploadSize : 업로드 파일의 용량 제한(Byte) 설정 - value 속성값을 -1로 설정하면 무제한 -->
		<beans:property name="maxUploadSize" value="20971520"/>
		<!-- defaultEncoding : multipart-formdata의 인코드 방식 설정 -->
		<beans:property name="defaultEncoding" value="UTF-8"/>
	</beans:bean>





	<!-- UrlBasedViewResolver : SpringFramework에서 제공하는 ViewResolver를 사용하지 않고
		 외부 라이브러리에 ViewResolver를 사용하기 위한 기능을 제공  -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<!-- 외부 라이브러리에 존재하는 ViewResolver 클래스를 viewClass 필드에 전달 -->
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<!-- ViewResolver의 우선순위를 order 필드에 전달 : 숫자가 적은 ViewResolver가 먼저 실행된다. -->
		<beans:property name="order" value="1"/>
	</beans:bean>
	
	<!-- TilesConfigurer : Tiles 기능을 이용하여 Templet 페이지 정보를 제공하기 위한 파일을 저장하는 클래스 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<!-- 필드에 Template 페이지 구현에 필요한 정보를 제공하기 위한 환경설정 파일을 List 인스턴스에 저장하여 전달 -->
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/spring/appServlet/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- InternalResourceViewResolver : Front Controller에서 제공받은
		 ViewName을 포워딩 하기 위한  ViewPage로 변환하여 반환하는 기능을 제공 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"/>
	</beans:bean>
	
	<context:component-scan base-package="com.itwill.controller" />
	<context:component-scan base-package="com.itwill.dao" />
	<context:component-scan base-package="com.itwill.service"/>
	<context:component-scan base-package="com.itwill.util"/>
	<context:component-scan base-package="com.itwill" />
	
	
	<interceptors>
		<interceptor>
			<mapping path="/mypage"/>
			<mapping path="/bookings"/>
			<mapping path="favorite"/>
			<mapping path="/review"/>
			<mapping path="/profile"/>
			<mapping path="/mypage/*"/>
			<mapping path="/addReview"/>
			<mapping path="/modifyReviewDetail"/>
			<!-- <mapping path="/addBooking"/> -->
			<beans:ref bean="authInterceptor"/>
		</interceptor>
	</interceptors>
	
	
	
	<beans:bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<!-- host : SMTP 서비스를 제공하는 서버명을 전달 -->
		<beans:property name="host" value="smtp.gmail.com"></beans:property>
		<!-- port : SMTP 서비스가 사용하는 port 번호 전달 -->
		<beans:property name="port" value="587"></beans:property>
		<!-- username : SMTP 서비스를 제공하는 서버의 계정명을 전달 -->
		<beans:property name="username" value="finalpickmeal@gmail.com"></beans:property>
		<!-- password : SMTP 서비스를 제공하는 서버의 계정비밀번호를 전달 -->
		<beans:property name="password" value="dbfk7177"></beans:property>
		<!-- javaMailProperties : SMTP 서비스를 사용하기 위한 기타 설정값을 전달 -->
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.smtp.ssl.trust">smtp.gmail.com</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
				<beans:prop key="mail.smtp.auth">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
</beans:beans>
